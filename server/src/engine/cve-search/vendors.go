package cve_search

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"enigma/server/src/common/cmds"
	"enigma/server/src/common/defs"
	"fmt"
	"html"
	"strings"
)

func GetVendorlist(G *defs.Global) (*defs.CVEBrowse, error) {
	vendorlist, err := getVendorlistFromDB(G.DBConn, 0, 0)
	if vendorlist == nil || len(vendorlist.Vendor) == 0 || err != nil {
		vendorlist, err = getVendorlistFromHTTPS()
		if err != nil {
			return nil, err
		}

		go func() {
			if insertVendorlistToDB(G.DBConn, vendorlist) != nil {
				G.Log.Error("insert vendorlist to db failed")
			} else {
				G.Log.Info("insert vendorlist to db success")
			}
		}()
	}
	return vendorlist, err
}

func GetVendorlistPartial(G *defs.Global, offset int, limit int) (*defs.CVEBrowse, error) {
	return getVendorlistFromDB(G.DBConn, offset, limit)
}

func IsVendorlistInDB(G *defs.Global) bool {
	vendorlist, err := getVendorlistFromDB(G.DBConn, 0, 0)
	notInDB := vendorlist == nil || len(vendorlist.Vendor) == 0 || err != nil

	return !notInDB
}

func insertVendorlistToDB(DBConn *sql.DB, vendorlist *defs.CVEBrowse) error {
	insertPrefix := "INSERT IGNORE INTO enigma.vendorlist (vendorName) VALUES "

	var buf bytes.Buffer

	// TBD: Fix this session, critical performance hits
	for i, vendor := range vendorlist.Vendor {
		vendor = strings.Replace(vendor, "'", "", -1)
		vendor = strings.Replace(vendor, "\"", "", -1)
		vendor = strings.Replace(vendor, "\\", "", -1)
		vendor = strings.Replace(vendor, " ", "", -1)

		buf.WriteString("('"+vendor+"'), ")
		if i != 0 && (i % 2000 == 0 || i == len(vendorlist.Vendor) - 1) {
			statement := insertPrefix + buf.String()
			statement = statement[0:len(statement) - 2]

			buf.Truncate(0)
			_, err := DBConn.Query(statement)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func getVendorlistFromDB(DBConn *sql.DB, offset int, limit int) (*defs.CVEBrowse, error) {
	var vendorlist *sql.Rows
	var err error
	if offset == 0 && limit == 0 {
		vendorlist, err = DBConn.Query("SELECT * FROM enigma.vendorlist;")
	} else {
		statement := fmt.Sprintf("SELECT * FROM enigma.vendorlist LIMIT %d OFFSET %d;", offset, limit)
		vendorlist, err = DBConn.Query(statement)
	}

	if err != nil {
		return nil, err
	}
	browse := &defs.CVEBrowse{
		Product: nil,
		Vendor:  nil,
	}
	for vendorlist.Next() {
		var id int
		var vendor string
		err = vendorlist.Scan(&id, &vendor)
		if err != nil {
			return nil, err
		}

		browse.Vendor = append(browse.Vendor, vendor)
	}

	return browse, nil
}

func getVendorlistFromHTTPS() (*defs.CVEBrowse, error) {
	response := cmds.CurlHttpsRequest(defs.GetVendorlistHTTPS)

	vendorlist := &defs.CVEBrowse{}

	err := json.Unmarshal([]byte(response), &vendorlist)

	if err != nil {
		return nil, err
	}

	return vendorlist, nil
}

func GetCWElist(G *defs.Global) ([]defs.CWERecord, error) {
	cwelist, err := getCWElistFromDB(G.DBConn)
	if cwelist == nil || len(cwelist) == 0 || err != nil {
		cwelist, err = getCWElistFromHTTPS()
		if err != nil {
			return nil, err
		}

		go func() {
			if insertCWElistToDB(G.DBConn, cwelist) != nil {
				G.Log.Error("insert cwelist to db failed")
			} else {
				G.Log.Info("insert cwelist to db success")
			}
		}()
	}
	return cwelist, err
}

// TBD
func getCWElistFromDB(DBConn *sql.DB) ([]defs.CWERecord, error) {
	return nil, nil
}

func getCWElistFromHTTPS() ([]defs.CWERecord, error) {
	response := cmds.CurlHttpsRequest(defs.GetCWERecordHTTPS)

	var cwelist []defs.CWERecord

	err := json.Unmarshal([]byte(response), &cwelist)

	if err != nil {
		return nil, err
	}

	return cwelist, nil
}

func insertCWElistToDB(DBConn *sql.DB, cwelist []defs.CWERecord) error {
	insertPrefix := "INSERT IGNORE INTO enigma.cwelist (cweId, description, name, relationships, status, weaknessabs) VALUES "

	var buf bytes.Buffer

	// TBD: Fix this session, critical performance hits
	for i, cwe := range cwelist {
		relationships := "-"
		descriptions := html.EscapeString(cwe.Description)
		name := html.EscapeString(cwe.Name)

		buf.WriteString("("+cwe.ID+", '" + descriptions +"', '" + name + "', '" + relationships +"', '"+ cwe.Status + "', '" + cwe.Weaknessabs + "'), ")
		if i != 0 && (i % 200 == 0 || i == len(cwelist) - 1) {
			statement := insertPrefix + buf.String()
			statement = statement[0:len(statement) - 2]

			buf.Truncate(0)
			_, err := DBConn.Query(statement)
			if err != nil {
				return err
			}
		}
	}

	return nil
}