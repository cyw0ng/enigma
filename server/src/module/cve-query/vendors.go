package cve_query

import (
	"enigma/server/src/common/defs"
	cve_search "enigma/server/src/engine/cve-search"
	"github.com/labstack/echo/v4"
	"net/http"
	"strconv"
)

func getVendorsAllHandler(c echo.Context) error {
	vendorlist, err := cve_search.GetVendorlist(G)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(vendorlist))
	}

	return c.JSON(http.StatusOK, defs.HttpResponse{
		Code:    1,
		Msg:     "cannot get vendorlist",
		Payload: nil,
	})
}

func getVendorsPartialHandler(c echo.Context) error {
	offsetParam := c.QueryParam("offset")
	limitParam := c.QueryParam("limit")

	offset, errOffset := strconv.Atoi(offsetParam)
	limit, errLimit := strconv.Atoi(limitParam)

	if len(offsetParam) == 0 || len(limitParam) == 0 || errLimit != nil || errOffset != nil || offset < 0 || limit < 0 {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    1,
			Msg:     "offset and limit should be positive int values",
			Payload: nil,
		})
	}

	// TBD: bug here, GetVendorlist has a goroutine without any barrier
	if !cve_search.IsVendorlistInDB(G) {
		_, err := cve_search.GetVendorlist(G)
		if err != nil {
			return c.JSON(http.StatusOK, defs.HttpResponse{
				Code:    1,
				Msg:     "cannot get vendorlist",
				Payload: nil,
			})
		}
	}

	vendorlist, err := cve_search.GetVendorlistPartial(G, offset, limit)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(vendorlist))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    1,
			Msg:     "failed to get partial vendorlist",
			Payload: nil,
		})
	}
}
