package cve_search

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"enigma/server/src/common/cmds"
	"enigma/server/src/common/defs"
	"strings"
)

func GetVendorlist(G *defs.Global) (*defs.CVEBrowse, error) {
	vendorlist, err := getVendorlistFromDB(G.DBConn)
	if vendorlist == nil || len(vendorlist.Vendor) == 0 || err != nil {
		vendorlist, err = getVendorlistFromHTTPS()
		if err != nil {
			return nil, err
		}

		go func() {
			if insertVendorlistToDB(G.DBConn, vendorlist) != nil {
				G.Log.Error("insert vendorlist to db failed")
			} else {
				G.Log.Info("insert vendorlist to db success")
			}
		}()
	}
	return vendorlist, err
}

func insertVendorlistToDB(DBConn *sql.DB, vendorlist *defs.CVEBrowse) error {
	insertPrefix := "INSERT IGNORE INTO enigma.vendorlist (vendorName) VALUES "

	var buf bytes.Buffer

	// TBD: Fix this session, critical performance hits
	for i, vendor := range vendorlist.Vendor {
		vendor = strings.Replace(vendor, "'", "", -1)
		vendor = strings.Replace(vendor, "\"", "", -1)
		vendor = strings.Replace(vendor, "\\", "", -1)
		vendor = strings.Replace(vendor, " ", "", -1)

		buf.WriteString("('"+vendor+"'), ")
		if i != 0 && (i % 2000 == 0 || i == len(vendorlist.Vendor) - 1) {
			statement := insertPrefix + buf.String()
			statement = statement[0:len(statement) - 2]

			buf.Truncate(0)
			_, err := DBConn.Query(statement)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func getVendorlistFromDB(DBConn *sql.DB) (*defs.CVEBrowse, error) {
	vendorlist, err := DBConn.Query("SELECT * FROM enigma.vendorlist")
	if err != nil {
		return nil, err
	}
	browse := &defs.CVEBrowse{
		Product: nil,
		Vendor:  nil,
	}
	for vendorlist.Next() {
		var id int
		var vendor string
		err = vendorlist.Scan(&id, &vendor)
		if err != nil {
			return nil, err
		}

		browse.Vendor = append(browse.Vendor, vendor)
	}

	return browse, nil
}

func getVendorlistFromHTTPS() (*defs.CVEBrowse, error) {
	response := cmds.CurlHttpsRequest(defs.GetVendorlistHTTPS)

	vendorlist := &defs.CVEBrowse{}

	err := json.Unmarshal([]byte(response), &vendorlist)

	if err != nil {
		return nil, err
	}

	return vendorlist, nil
}