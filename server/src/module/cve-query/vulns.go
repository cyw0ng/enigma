package cve_query

import (
	"enigma/server/src/common/defs"
	capec_analyze "enigma/server/src/engine/capecBackend"
	cve_search "enigma/server/src/engine/cveBackend"
	"github.com/labstack/echo/v4"
	"net/http"
)

func getCVEHandlerV1(c echo.Context) error {
	cveID := c.QueryParam("id")
	if len(cveID) == 0 {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "cveId should be provided for this endpoint",
			Payload: nil,
		})
	}
	cveRecord, err := cve_search.GetCVERecordFromID(cveID)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(cveRecord))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "failed to get cve record",
			Payload: nil,
		})
	}
}

func getCWEAllHandler(c echo.Context) error {
	cwelist, err := cve_search.GetCWElist(G)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(cwelist))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "failed to get cwelist",
			Payload: nil,
		})
	}
}

func getCapecAllHandler(c echo.Context) error {
	capeclist, err := capec_analyze.GetCapecAllRecords(G.DBConn)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(capeclist))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "failed to get full capeclist",
			Payload: nil,
		})
	}
}

func getCirclCurrentHandler(c echo.Context) error {
	circlInfo, err := cve_search.GetCirclInfo(G)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(circlInfo))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "failed to get circlInfo",
			Payload: nil,
		})
	}
}

func getCapecCountHandler(c echo.Context) error {
	capecCount, err := cve_search.GetCapecCountInDB(G)
	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(capecCount))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "failed to get capec count",
			Payload: nil,
		})
	}
}

func ctlAnalyzeCapecInfoHandler(c echo.Context) error {
	capecAnalyzeInfo, err := getCapecAnalyzeInfo(G)

	if err == nil {
		return c.JSON(http.StatusOK, defs.SuccessResponse(capecAnalyzeInfo))
	} else {
		return c.JSON(http.StatusOK, defs.HttpResponse{
			Code:    defs.REST_CODE_GENERIC_FAILED,
			Msg:     "failed to get capec analyze info",
			Payload: nil,
		})
	}
}

func getCapecAnalyzeInfo(G *defs.Global) (defs.CapecAnalyzeInfo, error) {
	var analyzeInfo defs.CapecAnalyzeInfo

	circlInfo, err := cve_search.GetCirclInfo(G)
	if err != nil {
		return analyzeInfo, err
	}
	inDBSize, err := cve_search.GetCapecCountInDB(G)
	if err != nil {
		return analyzeInfo, err
	}

	analyzeInfo.FullSize = circlInfo.Capec.Size
	analyzeInfo.CurrentSize = inDBSize

	return G.Modules.Capec.AnalyzeInfo, nil
}
